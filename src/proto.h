// SPDX-FileCopyrightText: 2001 Mark Hessling <mark@rexx.org>
// SPDX-License-Identifier: GPL-2.0
// SPDX-FileContributor: 2022 Ben Ravago

                                                         /* commutil.c */
char_t *get_key_name (int, int *);
char* get_key_definition (int, int, bool, bool);
short function_key (int, int, bool);
bool is_modifier_key (int);
char_t *build_default_key_definition (int, char_t *);
char_t *build_synonym_definition (DEFINE *, char_t *, char_t *, bool);
short display_all_keys (void);
int set_rexx_variables_for_all_keys (int, int *);
short command_line (char*, bool);
void cleanup_command_line (void);
void split_command (char_t *, char_t *, char_t *);
short param_split (char*, char*[], int, char*, char, char*, bool);
short quoted_param_split (char*, char*[], int, char*, char, char*, bool, char*);
short command_split (char_t *, char_t *[], int, char_t *, char_t *);
line_t get_true_line (bool);
length_t get_true_column (bool);
char_t next_char (LINE *, long *, length_t);
short add_define (DEFINE**, DEFINE**, int, char*, bool, char*, char);
short remove_define (DEFINE **, DEFINE **, int, char_t *);
short append_define (DEFINE **, DEFINE **, int, short, char_t *, char_t *, int, char_t *, char_t);
short find_command (char_t *, bool);
void init_command (void);
void add_command (char_t *);
char* get_next_command (short, int);
bool valid_command_to_save (char_t *);
bool is_tab_col (length_t);
length_t find_next_tab_col (length_t);
length_t find_prev_tab_col (length_t);
short tabs_convert (LINE *, bool, bool, bool);
short convert_hex_strings (char*);
short marked_block (bool);
short suspend_curses (void);
short resume_curses (void);
short restore_THE (void);
short execute_set_sos_command (bool, char*);
short valid_command_type (bool, char_t *);
short allocate_temp_space (length_t, char_t);
void free_temp_space (char_t);
char_t calculate_actual_row (short, short, row_t, bool);
short get_valid_macro_file_name (char *, char *, char *, short *);
bool define_command (char_t *);
int find_key_name (char*);
int readv_cmdline (char*, WINDOW*, int);
short execute_mouse_commands (int);
short validate_n_m (char_t *, short *, short *);
void ResetOrDeleteCUABlock (int);
short execute_locate (char*, bool, bool, bool*);
void adjust_other_screen_shadow_lines (void);
int is_file_in_ring (char_t * fpath, char_t * fname);
int save_lastop (int idx, char* lastop);
char* get_command_name (int idx, bool* set_command, bool* sos_command);

                                                            /* print.c */
void print_line (bool, line_t, line_t, short, char*, char*, short);
short setprintername (char *);
short setfontname (char *);
short setfontcpi (int);
short setfontlpi (int);
short setorient (char);
short setpagesize (int);

                                                           /* target.c */
short split_change_params (char_t *, char_t **, char_t **, TARGET *, line_t *, line_t *);
short parse_target (char*, line_t, TARGET*, long, bool, bool, bool);
void initialise_target (TARGET *);
void free_target (TARGET *);
short find_target (TARGET *, line_t, bool, bool);
short find_column_target (char*, length_t, TARGET*, length_t, bool, bool);
THELIST *find_line_name (LINE * curr, char_t * name);
LINE *find_named_line (char_t *, line_t *, bool);
short find_string_target (LINE *, RTARGET *, length_t, int);
short find_rtarget_target (LINE *, TARGET *, line_t, line_t, line_t *);
bool find_rtarget_column_target (char_t *, length_t, TARGET *, length_t, length_t, line_t *);
line_t find_next_in_scope (VIEW_DETAILS *, LINE *, line_t, short);
line_t find_last_not_in_scope (VIEW_DETAILS *, LINE *, line_t, short);
short validate_target (char*, TARGET*, long, line_t, bool, bool);
void calculate_scroll_values (char_t, VIEW_DETAILS *, short *, line_t *, line_t *, bool *, bool *, bool *, short);
short find_first_focus_line (char_t, unsigned short *);
short find_last_focus_line (char_t, unsigned short *);
char_t find_unique_char (char_t *);

                                                         /* reserved.c */
RESERVED* add_reserved_line (char*, char*, short, short, COLOUR_ATTR*, bool);
RESERVED* find_reserved_line (byte, bool, row_t, short, short);
short delete_reserved_line (short, short);

                                                              /* box.c */
void box_operations (short, char, bool, char);
void box_paste_from_clipboard (LINE *, line_t, line_t);

                                                          /* execute.c */
short execute_os_command (char*, bool, bool);
short execute_change_command (char*, bool);
short insert_new_line (byte, VIEW_DETAILS *, char*, length_t, line_t, line_t, bool, bool, bool, char, bool, bool);
short execute_makecurr (char_t, VIEW_DETAILS *, line_t);
short execute_shift_command (char_t, VIEW_DETAILS *, bool, length_t, line_t, line_t, bool, long, bool, bool);
short execute_set_lineflag (unsigned int, unsigned int, unsigned int, line_t, line_t, bool, long);
short do_actual_change_case (line_t, line_t, char_t, bool, short, length_t, length_t);
short execute_change_case (char*, char);
short rearrange_line_blocks (char_t, char_t, line_t, line_t, line_t, long, VIEW_DETAILS *, VIEW_DETAILS *, bool, line_t *);
short execute_set_point (char_t, VIEW_DETAILS *, char_t *, line_t, bool);
short execute_wrap_word (length_t);
short execute_split_join (short, bool, bool);
short execute_put (char*, bool);
short execute_macro (char*, bool, short*);
short write_macro (char_t *);
short execute_set_on_off (char_t *, bool *, bool);
short execute_set_row_position (char_t *, short *, short *);
short processable_line (VIEW_DETAILS *, line_t, LINE *);
short execute_expand_compress (char*, bool, bool, bool, bool);
short execute_select (char_t *, bool, short);
short execute_move_cursor (char_t, VIEW_DETAILS *, length_t);
short execute_find_command (char*, long);
short execute_modify_command (char*);
length_t calculate_rec_len (short, char *, length_t, length_t, line_t, short);
short execute_editv (short, bool, char*);
short prepare_dialog (char*, bool, char*);
short execute_dialog (char_t *, char_t *, char_t *, bool, short, short, char_t *, short, bool);
short prepare_popup (char*);
short execute_popup (int, int, int, int, int, int, int, int, char_t **, int);
short execute_preserve (VIEW_DETAILS *, PRESERVED_VIEW_DETAILS **, FILE_DETAILS *, PRESERVED_FILE_DETAILS **);
short execute_restore (VIEW_DETAILS *, PRESERVED_VIEW_DETAILS **, FILE_DETAILS *, PRESERVED_FILE_DETAILS **, bool);

                                                          /* default.c */
void set_global_defaults (void);
void set_global_look_defaults (void);
void set_global_feel_defaults (void);
void set_file_defaults (FILE_DETAILS *);
void set_view_defaults (VIEW_DETAILS *);
short get_profile (char *, char *);
short defaults_for_first_file (void);
short defaults_for_other_files (VIEW_DETAILS *);
short default_file_attributes (FILE_DETAILS *);
void set_screen_defaults (void);
short set_THE_key_defaults (int, int);
short set_XEDIT_key_defaults (int, int);
short set_ISPF_key_defaults (int, int);
short set_KEDIT_key_defaults (int, int);
short construct_default_parsers (void);
short destroy_all_parsers (void);
short construct_default_parser_mapping (void);
char* find_default_parser (char*);

                                                             /* edit.c */
void editor (void);
int process_key (int, bool);
short EditFile (char*, bool);

                                                            /* error.c */
int display_error (unsigned short, char*, bool);
void clear_msgline (int);
void display_prompt (char*);
int expose_msgline (void);

                                                             /* file.c */
short get_file (char*);
LINE* read_file (FILE*, LINE*, char*, line_t, line_t, bool);
LINE* read_fixed_file (FILE*, LINE*, char*, line_t, line_t);
short save_file (FILE_DETAILS*, char*, bool, line_t, line_t, line_t*, bool, length_t, length_t, bool, bool, bool);
void increment_alt (FILE_DETAILS *);
char* new_filename (char*, char*, char*, char*);
short remove_aus_file (FILE_DETAILS *);
short free_view_memory (bool, bool);
void free_a_view (void);
short free_file_memory (bool);
short read_directory (void);
VIEW_DETAILS* find_file (char*, char*);
VIEW_DETAILS* find_pseudo_file (char);
short execute_command_file (FILE*);
char* read_file_into_memory (char*, int*);

                                                          /* nonansi.c */
short file_readable (char *);
short file_writable (char *);
short file_exists (char *);
short remove_file (char *);
short splitpath (char *);
LINE *getclipboard (LINE *, int);
short setclipboard (FILE_DETAILS *, char *, bool, line_t, line_t, line_t, line_t *, bool, length_t, length_t, bool, bool, int);
void draw_cursor (bool);

                                                           /* parser.c */
short parse_line (char_t, FILE_DETAILS *, SHOW_LINE *, short);
short parse_paired_comments (char_t, FILE_DETAILS *);
short construct_parser (char*, int, PARSER_DETAILS **, char*, char*);
short destroy_parser (PARSER_DETAILS *);
bool find_parser_mapping (FILE_DETAILS *, PARSER_MAPPING *);
PARSER_DETAILS *find_auto_parser (FILE_DETAILS *);
short parse_reserved_line (RESERVED *);

                                                           /* prefix.c */
short execute_prefix_commands (void);
void clear_pending_prefix_command (THE_PPC *, FILE_DETAILS *, LINE *);
THE_PPC *delete_pending_prefix_command (THE_PPC *, FILE_DETAILS *, LINE *);
void add_prefix_command (char_t, VIEW_DETAILS *, LINE *, line_t, bool, bool);
short add_prefix_synonym (char_t *, char_t *);
char_t *find_prefix_synonym (char_t *);
char_t *find_prefix_oldname (char_t *);
char_t *get_prefix_command (line_t);
char_t get_syntax_element (char_t, int, int);

                                                             /* show.c */
void prepare_idline (char_t);
void show_heading (char_t);
void show_statarea (void);
void clear_statarea (void);
void display_filetabs (VIEW_DETAILS *);
void build_screen (char_t);
void display_screen (char_t);
void display_cmdline (char_t, VIEW_DETAILS *);
void show_marked_block (void);
void redraw_window (WINDOW *);
void repaint_screen (void);
void touch_screen (char_t);
void refresh_screen (char_t);
void redraw_screen (char_t);
bool line_in_view (char_t, line_t);
bool column_in_view (char_t, length_t);
line_t find_next_current_line (line_t, short);
short get_row_for_focus_line (char_t, line_t, short);
line_t get_focus_line_in_view (char_t, line_t, row_t);
line_t calculate_focus_line (line_t, line_t);
char *get_current_position (char_t, line_t *, length_t *);
void calculate_new_column (char_t, VIEW_DETAILS *, col_t, length_t, length_t, col_t *, length_t *);
short prepare_view (char_t);
short advance_view (VIEW_DETAILS *, short);
short force_curses_background (void);
short THE_Resize (int, int);

                                                           /* scroll.c */
short scroll_page (short, line_t, bool);
short scroll_line (byte, VIEW_DETAILS*, short, line_t, bool, short);

                                                              /* the.c */
void init_colour_pairs (void);
int setup_profile_files (char *);
void cleanup (void);
int allocate_working_memory (void);
char **StringToArgv (int *, char *);

                                                             /* util.c */
char* ebc2asc (char*, int, int, int);
char_t *asc2ebc (char_t *, int, int, int);
length_t memreveq (char_t *, char_t, length_t);
length_t memrevne (char*, char, length_t);
char *meminschr (char*, char, length_t, length_t, length_t);
char *meminsmem (char*, char*, length_t, length_t, length_t, length_t);
char* memdeln (char*, length_t, length_t, length_t);
char_t *strdelchr (char_t *, char_t);
char_t *memrmdup (char_t *, length_t *, char_t);
char* strrmdup (char*, char, bool);
length_t strzne (char*, char);
char* my_strdup (char*);
length_t memne (char_t *, char_t, length_t);
length_t strzrevne (char_t *, char_t);
length_t strzreveq (char*, char);
char* strtrunc (char*);
char* MyStrip (char*, char, char);
length_t memfind (char_t *, char_t *, length_t, length_t, bool, bool, char_t, char_t, length_t *);
void memrev (char_t *, char_t *, length_t);
length_t memcmpi (char*, char*, length_t);
char* make_upper (char*);
bool equal (char*, char*, length_t);
bool valid_integer (char*);
bool valid_positive_integer (char*);
short valid_positive_integer_against_maximum (char*, length_t);
length_t strzeq (char*, char);
char* strtrans (char*, char, char);
LINE *add_LINE (LINE *, LINE *, char*, length_t, select_t, bool);
LINE *append_LINE (LINE *, char_t *, length_t);
LINE *delete_LINE (LINE **, LINE **, LINE *, short, bool);
void put_string (WINDOW*, row_t, col_t, char*, length_t);
void put_char (WINDOW *, chtype, char_t);
short set_up_windows (short);
short draw_divider (void);
short create_statusline_window (void);
short create_filetabs_window (void);
void pre_process_line (VIEW_DETAILS *, line_t, LINE *);
short post_process_line (VIEW_DETAILS *, line_t, LINE *, bool);
bool blank_field (char*);
void adjust_marked_lines (bool, line_t, line_t);
void adjust_pending_prefix (VIEW_DETAILS *, bool, line_t, line_t);
char_t case_translate (char_t);
void add_to_recovery_list (char *, length_t);
void get_from_recovery_list (short);
void free_recovery_list (void);
short my_wmove (WINDOW *, short, short, short, short);
short my_isalphanum (char_t);
short get_row_for_tof_eof (short, char_t);
void set_compare_exact (bool);
int search_query_item_array (void *, size_t, size_t, const char *, int);
int split_function_name (char*, int*);
VIEW_DETAILS *find_filetab (int);
VIEW_DETAILS *find_next_file (VIEW_DETAILS *, short);

short my_wclrtoeol (WINDOW *);
short my_wdelch (WINDOW *);
short get_word (char*, length_t, length_t, length_t*, length_t*);
short get_fieldword (char_t *, length_t, length_t, length_t *, length_t *);

                                                           /* linked.c */
THELIST* ll_add (THELIST* first, THELIST* curr, unsigned short size);
THELIST* ll_del (THELIST** first, THELIST** last, THELIST* curr, short direction, THELIST_DEL delfunc);
THELIST* ll_free (THELIST* first, THELIST_DEL delfunc);
LINE* lll_add (LINE*, LINE*, unsigned short);
LINE* lll_del (LINE**, LINE**, LINE*, short);
LINE* lll_free (LINE*);
LINE* lll_find (LINE*, LINE*, line_t, line_t);
LINE* lll_locate (LINE*, char*);
VIEW_DETAILS* vll_add (VIEW_DETAILS*, VIEW_DETAILS*, unsigned short);
VIEW_DETAILS* vll_del (VIEW_DETAILS**, VIEW_DETAILS**, VIEW_DETAILS*, short);
DEFINE* dll_add (DEFINE*, DEFINE*, unsigned short);
DEFINE* dll_del (DEFINE**, DEFINE**, DEFINE*, short);
DEFINE* dll_free (DEFINE*);
THE_PPC* pll_add (THE_PPC**, unsigned short, line_t);
THE_PPC* pll_del (THE_PPC**, THE_PPC**, THE_PPC*, short);
THE_PPC* pll_free (THE_PPC*);
THE_PPC* pll_find (THE_PPC*, line_t);
RESERVED* rll_add (RESERVED*, RESERVED*, unsigned short);
RESERVED* rll_del (RESERVED**, RESERVED**, RESERVED*, short);
RESERVED* rll_free (RESERVED*);
RESERVED* rll_find (RESERVED*, short);
PARSER_DETAILS* parserll_add (PARSER_DETAILS*, PARSER_DETAILS*, unsigned short);
PARSER_DETAILS* parserll_del (PARSER_DETAILS**, PARSER_DETAILS**, PARSER_DETAILS*, short);
PARSER_DETAILS* parserll_free (PARSER_DETAILS*);
PARSER_DETAILS* parserll_find (PARSER_DETAILS*, char*);
PARSE_KEYWORDS* parse_keywordll_add (PARSE_KEYWORDS*, PARSE_KEYWORDS*, unsigned short);
PARSE_KEYWORDS* parse_keywordll_del (PARSE_KEYWORDS**, PARSE_KEYWORDS**, PARSE_KEYWORDS*, short);
PARSE_KEYWORDS* parse_keywordll_free (PARSE_KEYWORDS*);
PARSE_FUNCTIONS* parse_functionll_add (PARSE_FUNCTIONS*, PARSE_FUNCTIONS*, unsigned short);
PARSE_FUNCTIONS* parse_functionll_del (PARSE_FUNCTIONS**, PARSE_FUNCTIONS**, PARSE_FUNCTIONS*, short);
PARSE_FUNCTIONS* parse_functionll_free (PARSE_FUNCTIONS*);
PARSE_HEADERS* parse_headerll_add (PARSE_HEADERS*, PARSE_HEADERS*, unsigned short);
PARSE_HEADERS* parse_headerll_free (PARSE_HEADERS*);
PARSER_MAPPING* mappingll_add (PARSER_MAPPING*, PARSER_MAPPING*, unsigned short);
PARSER_MAPPING* mappingll_del (PARSER_MAPPING**, PARSER_MAPPING**, PARSER_MAPPING*, short);
PARSER_MAPPING* mappingll_free (PARSER_MAPPING*);
PARSER_MAPPING* mappingll_find (PARSER_MAPPING*, char*, char*);
PARSE_COMMENTS* parse_commentsll_add (PARSE_COMMENTS*, PARSE_COMMENTS*, unsigned short);
PARSE_COMMENTS* parse_commentsll_del (PARSE_COMMENTS**, PARSE_COMMENTS**, PARSE_COMMENTS*, short);
PARSE_COMMENTS* parse_commentsll_free (PARSE_COMMENTS*);
PARSE_COMMENTS* parse_commentsll_find (PARSE_COMMENTS*, char*);
PARSE_POSTCOMPARE* parse_postcomparell_add (PARSE_POSTCOMPARE*, PARSE_POSTCOMPARE*, unsigned short);
PARSE_POSTCOMPARE* parse_postcomparell_del (PARSE_POSTCOMPARE**, PARSE_POSTCOMPARE**, PARSE_POSTCOMPARE*, short);
PARSE_POSTCOMPARE* parse_postcomparell_free (PARSE_POSTCOMPARE*);
PARSE_EXTENSION* parse_extensionll_add (PARSE_EXTENSION*, PARSE_EXTENSION*, unsigned short);
PARSE_EXTENSION* parse_extensionll_del (PARSE_EXTENSION**, PARSE_EXTENSION**, PARSE_EXTENSION*, short);
PARSE_EXTENSION* parse_extensionll_free (PARSE_EXTENSION*);

                                                             /* rexx.c */
unsigned long MyRexxRegisterFunctionExe (char *);
unsigned long MyRexxDeregisterFunction (char *);
short initialise_rexx (void);
short finalise_rexx (void);
short execute_macro_file (char *, char *, short *, bool);
short execute_macro_instore (char *, short *, char **, int *, int *, int);
short get_rexx_variable (char *, char **, int *);
short set_rexx_variable (char *, char *, length_t, int);
char *get_rexx_interpreter_version (char *);

                                                           /* os2eas.c */
                                                            /* query.c */
short find_query_item (char*, int, char*);
short show_status (void);
short save_status (char*);
short set_extract_variables (short);
short get_number_dynamic_items (int);
short get_item_values (int, short, char*, char, line_t, char*, line_t);
int number_query_item (void);
int number_function_item (void);
void format_options (char_t *);

                                                             /* sort.c */
short execute_sort (char*);

                                                           /* cursor.c */
short THEcursor_cmdline (byte, VIEW_DETAILS*, short);
short THEcursor_column (void);
short THEcursor_down (byte, VIEW_DETAILS*, short);
short THEcursor_file (bool, line_t, length_t);
short THEcursor_home (byte, VIEW_DETAILS*, bool);
short THEcursor_left (short, bool);
short THEcursor_right (short, bool);
short THEcursor_up (short);
short THEcursor_move (byte, VIEW_DETAILS*, bool, bool, short, short);
short THEcursor_goto (line_t, length_t);
short THEcursor_mouse (void);
long where_now (void);
long what_current_now (void);
long what_other_now (void);
long where_next (long, long, long);
long where_before (long, long, long);
bool enterable_field (long);
short go_to_new_field (long, long);
void get_cursor_position (line_t *, length_t *, line_t *, length_t *);
short advance_focus_line (line_t);
short advance_current_line (line_t);
short advance_current_or_focus_line (line_t);
void resolve_current_and_focus_lines (byte, VIEW_DETAILS*, line_t, line_t, short, bool, bool);

                                                           /* colour.c */
short parse_colours (char*, COLOUR_ATTR*, char**, bool, bool*);
short parse_modifiers (char*, COLOUR_ATTR*);
chtype merge_curline_colour (COLOUR_ATTR *, COLOUR_ATTR *);
void set_up_default_colours (FILE_DETAILS *, COLOUR_ATTR *, int);
void set_up_default_ecolours (FILE_DETAILS *);
char *get_colour_strings (COLOUR_ATTR*);
int is_valid_colour (char* colour);

                                                           /* column.c */
short column_command (char*, int);

                                                            /* mouse.c */
void wmouse_position (WINDOW *, int *, int *);
short THEMouse (char*);
short get_mouse_info (int *, int *, int *);
void which_window_is_mouse_in (byte*, int*);
void reset_saved_mouse_pos (void);
void get_saved_mouse_pos (int *, int *);
void initialise_mouse_commands (void);
int mouse_info_to_key (int, int, int, int);
char* mouse_key_number_to_name (int, char*, int *);
int find_mouse_key_value (char*);
int find_mouse_key_value_in_window (char*, char*);
short ScrollbarHorz (char*);
short ScrollbarVert (char*);

                                                           /* single.c */
int initialise_fifo (LINE * first_file_name, line_t startup_line, length_t startup_column, bool ro);
int process_fifo_input (int key);
void close_fifo (void);

                                                            /* comm*.c */
short Add (char*);
short Alert (char*);
short All (char*);
short Alt (char*);
short Arbchar (char*);
short Autocolour (char*);
short Autosave (char*);
short Autoscroll (char*);
short Backup (char*);
short Backward (char*);
short BeepSound (char*);
short Bottom (char*);
short Boundmark (char*);
short Cappend (char*);
short Cancel (char *);
short Case (char*);
short Ccancel (char*);
short Cdelete (char*);
short Cfirst (char*);
short Change (char*);
short Cinsert (char*);
short Clast (char*);
short THEClipboard (char*);
short Clearerrorkey (char*);
short Clearscreen (char*);
short Clocate (char*);
short Clock (char*);
short Cmatch (char*);
short Cmdarrows (char*);
short Cmdline (char*);
short Cmsg (char*);
short Colour (char*);
short Colouring (char*);
short Compat (char*);
short Compress (char*);
short THECommand (char*);
short ControlChar (char*);
short Copy (char*);
short Coverlay (char*);
short Creplace (char*);
short Ctlchar (char*);
short Curline (char*);
short Cursor (char*);
short CursorStay (char*);
short Define (char*);
short Defsort (char*);
short DeleteLine (char*);
short Dialog (char*);
short Directory (char*);
short Display (char*);
short Duplicate (char*);
short Ecolour (char*);
short Emsg (char*);
short THEEditv (char*);
short Enter (char*);
short Eolout (char*);
short Equivchar (char*);
short Errorformat (char*);
short Erroroutput (char*);
short Etmode (char *);
short Expand (char*);
short Extract (char*);
short Ffile (char*);
short File (char*);
short THEFiletabs (char*);
short Fillbox (char*);
short Find (char*);
short Findup (char*);
short Fext (char*);
short Filename (char*);
short Fmode (char*);
short Fname (char*);
short Forward (char*);
short Fpath (char*);
short Fullfname (char*);
short Get (char*);
short THEHeader (char*);
short Help (char*);
short Hex (char*);
short Hexdisplay (char*);
short Hexshow (char*);
short Highlight (char*);
short Hit (char*);
short Idline (char*);
short Impmacro (char*);
short Impos (char*);
short Input (char*);
short Inputmode (char*);
short Insertmode (char*);
short THEInterface (char*);
short Join (char*);
short Lastop (char*);
short Left (char*);
short Lineflag (char*);
short Linend (char*);
short Locate (char*);
short Lowercase (char*);
short Macro (char*);
short SetMacro (char*);
short Macroext (char*);
short Macropath (char *);
short Margins (char*);
short Mark (char*);
short Modify (char*);
short Mouse (char*);
short THEMove (char*);
short Msg (char*);
short Msgline (char*);
short Msgmode (char*);
short Newlines (char*);
short THENext (char*);
short Nextwindow (char*);
short Nfind (char*);
short Nfindup (char*);
short Nomsg (char*);
short Nondisp (char*);
short Nop (char*);
short Number (char*);
short Overlaybox (char*);
short Os (char*);
short Osnowait (char*);
short Osquiet (char*);
short Osredir (char*);
short Pagewrap (char_t *);
short Parser (char_t *);
short Pending (char_t *);
short Point (char_t *);
short Popup (char*);
short Position (char_t *);
short Prefix (char_t *);
short Preserve (char*);
short Prevwindow (char*);
short Print (char*);
short Pscreen (char_t *);
short THEPrinter (char_t *);
short Put (char*);
short Putd (char*);
short Qquit (char*);
short Quit (char*);
short Query (char*);
short THEReadonly (char_t *);
short Readv (char*);
short THERecord (char*);
short Recover (char*);
short Reexecute (char*);
short Redit (char*);
short Redraw (char*);
short THERefresh (char*);
short Repeat (char*);
short Replace (char*);
short Reprofile (char_t *);
short Reserved (char_t *);
short Reset (char*);
short Restore (char*);
short Retrieve (char*);
short Rexxhalt (char_t *);
short Rexxoutput (char_t *);
short THERexx (char*);
short Rgtleft (char*);
short Right (char*);
short Save (char*);
short Scope (char_t *);
short Scale (char_t *);
short THESearch (char*);
short Select (char_t *);
short Set (char*);
short Schange (char*);
short Slk (char_t *);
short THEScreen (char*);
short Shadow (char_t *);
short Shift (char*);
short ShowKey (char*);
short Sort (char*);
short Sos (char*);
short Sos_addline (char*);
short Sos_blockend (char_t *);
short Sos_blockstart (char_t *);
short Sos_bottomedge (char*);
short Sos_cuadelback (char_t *);
short Sos_cuadelchar (char_t *);
short Sos_current (char_t *);
short do_Sos_current (char*, byte, VIEW_DETAILS*);
short Sos_cursoradj (char_t *);
short Sos_cursorshift (char_t *);
short Sos_delback (char_t *);
short Sos_delchar (char_t *);
short Sos_delend (char_t *);
short Sos_delline (char_t *);
short Sos_delword (char_t *);
short Sos_doprefix (char*);
short Sos_edit (char_t *);
short Sos_endchar (char*);
short Sos_execute (char*);
short Sos_firstchar (char*);
short Sos_firstcol (char*);
short Sos_instab (char_t *);
short Sos_lastcol (char*);
short Sos_leftedge (char*);
short Sos_makecurr (char_t *);
short Sos_marginl (char*);
short Sos_marginr (char_t *);
short Sos_pastecmdline (char_t *);
short Sos_parindent (char_t *);
short Sos_prefix (char*);
short do_Sos_prefix (char*, byte, VIEW_DETAILS*);
short Sos_qcmnd (char_t *);
short Sos_rightedge (char*);
short Sos_settab (char_t *);
short Sos_startendchar (char_t *);
short Sos_tabb (char_t *);
short Sos_tabf (char_t *);
short Sos_tabfieldb (char_t *);
short Sos_tabfieldf (char_t *);
short Sos_tabwordb (char_t *);
short Sos_tabwordf (char_t *);
short Sos_topedge (char*);
short Sos_undo (char_t *);
short Span (char_t *);
short Spill (char_t *);
short Split (char*);
short Spltjoin (char*);
short Ssave (char*);
short Statopt (char *);
short Status (char*);
short Statusline (char_t *);
short Stay (char_t *);
short Suspend (char*);
short Synonym (char_t *);
short Tabfile (char*);
short Tabkey (char_t *);
short Tabline (char_t *);
short Tabpre (char*);
short Tabs (char_t *);
short Tabsin (char_t *);
short Tabsout (char_t *);
short Tag (char*);
short Targetsave (char_t *);
short Text (char*);
short THighlight (char_t *);
short Timecheck (char_t *);
short Toascii (char*);
short Tofeof (char_t *);
short Top (char*);
short Trailing (char_t *);
short Trunc (char_t *);
short THETypeahead (char *);
short Undoing (char_t *);
short Untaa (char_t *);
short Up (char*);
short Uppercase (char*);
short Verify (char_t *);
short Width (char_t *);
short Word (char_t *);
short Wordwrap (char_t *);
short Wrap (char_t *);
short Xedit (char *);
short Zone (char_t *);
