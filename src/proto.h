// SPDX-FileCopyrightText: 2001 Mark Hessling <mark@rexx.org>
// SPDX-License-Identifier: GPL-2.0
// SPDX-FileContributor: 2022 Ben Ravago

/* commutil.c */
uchar *get_key_name (int, int *);
uchar *get_key_definition (int, int, bool, bool);
short function_key (int, int, bool);
bool is_modifier_key (int);
uchar *build_default_key_definition (int, uchar *);
uchar *build_synonym_definition (DEFINE *, uchar *, uchar *, bool);
short display_all_keys (void);
int set_rexx_variables_for_all_keys (int, int *);
short command_line (uchar *, bool);
void cleanup_command_line (void);
void split_command (uchar *, uchar *, uchar *);
short param_split (uchar *, uchar *[], int, uchar *, uchar, uchar *, bool);
short quoted_param_split (uchar *, uchar *[], int, uchar *, uchar, uchar *, bool, uchar *);
short command_split (uchar *, uchar *[], int, uchar *, uchar *);
long get_true_line (bool);
long get_true_column (bool);
uchar next_char (LINE *, long *, long);
short add_define (DEFINE **, DEFINE **, int, uchar *, bool, uchar *, uchar);
short remove_define (DEFINE **, DEFINE **, int, uchar *);
short append_define (DEFINE **, DEFINE **, int, short, uchar *, uchar *, int, uchar *, uchar);
short find_command (uchar *, bool);
void init_command (void);
void add_command (uchar *);
uchar *get_next_command (short, int);
bool valid_command_to_save (uchar *);
bool is_tab_col (long);
long find_next_tab_col (long);
long find_prev_tab_col (long);
short tabs_convert (LINE *, bool, bool, bool);
short convert_hex_strings (uchar *);
short marked_block (bool);
short suspend_curses (void);
short resume_curses (void);
short restore_THE (void);
short execute_set_sos_command (bool, uchar *);
short valid_command_type (bool, uchar *);
short allocate_temp_space (long, uchar);
void free_temp_space (uchar);
uchar calculate_actual_row (short, short, ushort, bool);
short get_valid_macro_file_name (uchar *, uchar *, uchar *, short *);
bool define_command (uchar *);
int find_key_name (uchar *);
int readv_cmdline (uchar *, WINDOW *, int);
short execute_mouse_commands (int);
short validate_n_m (uchar *, short *, short *);
void ResetOrDeleteCUABlock (int);
short execute_locate (uchar *, bool, bool, bool *);
void adjust_other_screen_shadow_lines (void);
int is_file_in_ring (uchar * fpath, uchar * fname);
int save_lastop (int idx, uchar * lastop);
uchar *get_command_name (int idx, bool *set_command, bool *sos_command);

/* print.c */
void print_line (bool, long, long, short, uchar *, uchar *, short);
short setprintername (char *);
short setfontname (char *);
short setfontcpi (int);
short setfontlpi (int);
short setorient (char);
short setpagesize (int);

/* target.c */
short split_change_params (uchar *, uchar **, uchar **, TARGET *, long *, long *);
short parse_target (uchar *, long, TARGET *, long, bool, bool, bool);
void initialise_target (TARGET *);
void free_target (TARGET *);
short find_target (TARGET *, long, bool, bool);
short find_column_target (uchar *, long, TARGET *, long, bool, bool);
THELIST *find_line_name (LINE * curr, uchar * name);
LINE *find_named_line (uchar *, long *, bool);
short find_string_target (LINE *, RTARGET *, long, int);
short find_rtarget_target (LINE *, TARGET *, long, long, long *);
bool find_rtarget_column_target (uchar *, long, TARGET *, long, long, long *);
long find_next_in_scope (VIEW_DETAILS *, LINE *, long, short);
long find_last_not_in_scope (VIEW_DETAILS *, LINE *, long, short);
short validate_target (uchar *, TARGET *, long, long, bool, bool);
void calculate_scroll_values (uchar, VIEW_DETAILS *, short *, long *, long *, bool *, bool *, bool *, short);
short find_first_focus_line (uchar, unsigned short *);
short find_last_focus_line (uchar, unsigned short *);
uchar find_unique_char (uchar *);

/* reserved.c */
RESERVED *add_reserved_line (uchar *, uchar *, short, short, COLOUR_ATTR *, bool);
RESERVED *find_reserved_line (uchar, bool, ushort, short, short);
short delete_reserved_line (short, short);

/* box.c */
void box_operations (short, uchar, bool, uchar);
void box_paste_from_clipboard (LINE *, long, long);

/* execute.c */
short execute_os_command (uchar *, bool, bool);
short execute_change_command (uchar *, bool);
short insert_new_line (uchar, VIEW_DETAILS *, uchar *, long, long, long, bool, bool, bool, uchar, bool, bool);
short execute_makecurr (uchar, VIEW_DETAILS *, long);
short execute_shift_command (uchar, VIEW_DETAILS *, bool, long, long, long, bool, long, bool, bool);
short execute_set_lineflag (unsigned int, unsigned int, unsigned int, long, long, bool, long);
short do_actual_change_case (long, long, uchar, bool, short, long, long);
short execute_change_case (uchar *, uchar);
short rearrange_line_blocks (uchar, uchar, long, long, long, long, VIEW_DETAILS *, VIEW_DETAILS *, bool, long *);
short execute_set_point (uchar, VIEW_DETAILS *, uchar *, long, bool);
short execute_wrap_word (long);
short execute_split_join (short, bool, bool);
short execute_put (uchar *, bool);
short execute_macro (uchar *, bool, short *);
short write_macro (uchar *);
short execute_set_on_off (uchar *, bool *, bool);
short execute_set_row_position (uchar *, short *, short *);
short processable_line (VIEW_DETAILS *, long, LINE *);
short execute_expand_compress (uchar *, bool, bool, bool, bool);
short execute_select (uchar *, bool, short);
short execute_move_cursor (uchar, VIEW_DETAILS *, long);
short execute_find_command (uchar *, long);
short execute_modify_command (uchar *);
long calculate_rec_len (short, uchar *, long, long, long, short);
short execute_editv (short, bool, uchar *);
short prepare_dialog (uchar *, bool, uchar *);
short execute_dialog (uchar *, uchar *, uchar *, bool, short, short, uchar *, short, bool);
short prepare_popup (uchar *);
short execute_popup (int, int, int, int, int, int, int, int, uchar **, int);
short execute_preserve (VIEW_DETAILS *, PRESERVED_VIEW_DETAILS **, FILE_DETAILS *, PRESERVED_FILE_DETAILS **);
short execute_restore (VIEW_DETAILS *, PRESERVED_VIEW_DETAILS **, FILE_DETAILS *, PRESERVED_FILE_DETAILS **, bool);

/* default.c */
void set_global_defaults (void);
void set_global_look_defaults (void);
void set_global_feel_defaults (void);
void set_file_defaults (FILE_DETAILS *);
void set_view_defaults (VIEW_DETAILS *);
short get_profile (uchar *, uchar *);
short defaults_for_first_file (void);
short defaults_for_other_files (VIEW_DETAILS *);
short default_file_attributes (FILE_DETAILS *);
void set_screen_defaults (void);
short set_THE_key_defaults (int, int);
short set_XEDIT_key_defaults (int, int);
short set_ISPF_key_defaults (int, int);
short set_KEDIT_key_defaults (int, int);
short construct_default_parsers (void);
short destroy_all_parsers (void);
short construct_default_parser_mapping (void);
uchar *find_default_parser (uchar *);

/* edit.c */
void editor (void);
int process_key (int, bool);
short EditFile (uchar *, bool);

/* error.c */
int display_error (unsigned short, uchar *, bool);
void clear_msgline (int);
void display_prompt (uchar *);
int expose_msgline (void);

/* file.c */
short get_file (uchar *);
LINE *read_file (FILE *, LINE *, uchar *, long, long, bool);
LINE *read_fixed_file (FILE *, LINE *, uchar *, long, long);
short save_file (FILE_DETAILS *, uchar *, bool, long, long, long *, bool, long, long, bool, bool, bool);
void increment_alt (FILE_DETAILS *);
uchar *new_filename (uchar *, uchar *, uchar *, uchar *);
short remove_aus_file (FILE_DETAILS *);
short free_view_memory (bool, bool);
void free_a_view (void);
short free_file_memory (bool);
short read_directory (void);
VIEW_DETAILS *find_file (uchar *, uchar *);
VIEW_DETAILS *find_pseudo_file (uchar);
short execute_command_file (FILE *);
uchar *read_file_into_memory (uchar *, int *);

/* getch.c */
int my_getch (WINDOW *);

/* nonansi.c */
short file_readable (uchar *);
short file_writable (uchar *);
short file_exists (uchar *);
short remove_file (uchar *);
short splitpath (uchar *);
void draw_cursor (bool);

/* parser.c */
short parse_line (uchar, FILE_DETAILS *, SHOW_LINE *, short);
short parse_paired_comments (uchar, FILE_DETAILS *);
short construct_parser (uchar *, int, PARSER_DETAILS **, uchar *, uchar *);
short destroy_parser (PARSER_DETAILS *);
bool find_parser_mapping (FILE_DETAILS *, PARSER_MAPPING *);
PARSER_DETAILS *find_auto_parser (FILE_DETAILS *);
short parse_reserved_line (RESERVED *);

/* prefix.c */
short execute_prefix_commands (void);
void clear_pending_prefix_command (THE_PPC *, FILE_DETAILS *, LINE *);
THE_PPC *delete_pending_prefix_command (THE_PPC *, FILE_DETAILS *, LINE *);
void add_prefix_command (uchar, VIEW_DETAILS *, LINE *, long, bool, bool);
short add_prefix_synonym (uchar *, uchar *);
uchar *find_prefix_synonym (uchar *);
uchar *find_prefix_oldname (uchar *);
uchar *get_prefix_command (long);
uchar get_syntax_element (uchar, int, int);

/* show.c */
void prepare_idline (uchar);
void show_heading (uchar);
void show_statarea (void);
void clear_statarea (void);
void display_filetabs (VIEW_DETAILS *);
void build_screen (uchar);
void display_screen (uchar);
void display_cmdline (uchar, VIEW_DETAILS *);
void show_marked_block (void);
void redraw_window (WINDOW *);
void repaint_screen (void);
void touch_screen (uchar);
void refresh_screen (uchar);
void redraw_screen (uchar);
bool line_in_view (uchar, long);
bool column_in_view (uchar, long);
long find_next_current_line (long, short);
short get_row_for_focus_line (uchar, long, short);
long get_focus_line_in_view (uchar, long, ushort);
long calculate_focus_line (long, long);
char *get_current_position (uchar, long *, long *);
void calculate_new_column (uchar, VIEW_DETAILS *, ushort, long, long, ushort *, long *);
short prepare_view (uchar);
short advance_view (VIEW_DETAILS *, short);
short force_curses_background (void);
short THE_Resize (int, int);

/* scroll.c */
short scroll_page (short, long, bool);
short scroll_line (uchar, VIEW_DETAILS *, short, long, bool, short);

/* the.c */
void init_colour_pairs (void);
int setup_profile_files (uchar *);
void cleanup (void);
int allocate_working_memory (void);
char **StringToArgv (int *, char *);

/* util.c */
uchar *ebc2asc (uchar *, int, int, int);
uchar *asc2ebc (uchar *, int, int, int);
long memreveq (uchar *, uchar, long);
long memrevne (uchar *, uchar, long);
uchar *meminschr (uchar *, uchar, long, long, long);
uchar *meminsmem (uchar *, uchar *, long, long, long, long);
uchar *memdeln (uchar *, long, long, long);
uchar *strdelchr (uchar *, uchar);
uchar *memrmdup (uchar *, long *, uchar);
uchar *strrmdup (uchar *, uchar, bool);
long strzne (uchar *, uchar);
long memne (uchar *, uchar, long);
long strzrevne (uchar *, uchar);
long strzreveq (uchar *, uchar);
uchar *strtrunc (uchar *);
uchar *strstrip (uchar *, char, char);
long memfind (uchar *, uchar *, long, long, bool, bool, uchar, uchar, long *);
void memrev (uchar *, uchar *, long);
long memcmpi (uchar *, uchar *, long);
uchar *make_upper (uchar *);
bool equal (uchar *, uchar *, long);
bool valid_integer (uchar *);
bool valid_positive_integer (uchar *);
short valid_positive_integer_against_maximum (uchar *, long);
long strzeq (uchar *, uchar);
uchar *strtrans (uchar *, uchar, uchar);
LINE *add_LINE (LINE *, LINE *, uchar *, long, ushort, bool);
LINE *append_LINE (LINE *, uchar *, long);
LINE *delete_LINE (LINE **, LINE **, LINE *, short, bool);
void put_string (WINDOW *, ushort, ushort, uchar *, long);
void put_char (WINDOW *, chtype, uchar);
short set_up_windows (short);
short draw_divider (void);
short create_statusline_window (void);
short create_filetabs_window (void);
void pre_process_line (VIEW_DETAILS *, long, LINE *);
short post_process_line (VIEW_DETAILS *, long, LINE *, bool);
bool blank_field (uchar *);
void adjust_marked_lines (bool, long, long);
void adjust_pending_prefix (VIEW_DETAILS *, bool, long, long);
uchar case_translate (uchar);
void add_to_recovery_list (uchar *, long);
void get_from_recovery_list (short);
void free_recovery_list (void);
short my_wmove (WINDOW *, short, short, short, short);
short my_isalphanum (uchar);
short get_row_for_tof_eof (short, uchar);
void set_compare_exact (bool);
int search_query_item_array (void *, size_t, size_t, const char *, int);
int split_function_name (uchar *, int *);
char *tmpname (char *);
VIEW_DETAILS *find_filetab (int);
VIEW_DETAILS *find_next_file (VIEW_DETAILS *, short);

short my_wclrtoeol (WINDOW *);
short my_wdelch (WINDOW *);
short get_word (uchar *, long, long, long *, long *);
short get_fieldword (uchar *, long, long, long *, long *);

/* linked.c */
THELIST *ll_add (THELIST * first, THELIST * curr, unsigned short size);
THELIST *ll_del (THELIST ** first, THELIST ** last, THELIST * curr, short direction, THELIST_DEL delfunc);
THELIST *ll_free (THELIST * first, THELIST_DEL delfunc);
LINE *lll_add (LINE *, LINE *, unsigned short);
LINE *lll_del (LINE **, LINE **, LINE *, short);
LINE *lll_free (LINE *);
LINE *lll_find (LINE *, LINE *, long, long);
LINE *lll_locate (LINE *, uchar *);
VIEW_DETAILS *vll_add (VIEW_DETAILS *, VIEW_DETAILS *, unsigned short);
VIEW_DETAILS *vll_del (VIEW_DETAILS **, VIEW_DETAILS **, VIEW_DETAILS *, short);
DEFINE *dll_add (DEFINE *, DEFINE *, unsigned short);
DEFINE *dll_del (DEFINE **, DEFINE **, DEFINE *, short);
DEFINE *dll_free (DEFINE *);
THE_PPC *pll_add (THE_PPC **, unsigned short, long);
THE_PPC *pll_del (THE_PPC **, THE_PPC **, THE_PPC *, short);
THE_PPC *pll_free (THE_PPC *);
THE_PPC *pll_find (THE_PPC *, long);
RESERVED *rll_add (RESERVED *, RESERVED *, unsigned short);
RESERVED *rll_del (RESERVED **, RESERVED **, RESERVED *, short);
RESERVED *rll_free (RESERVED *);
RESERVED *rll_find (RESERVED *, short);
PARSER_DETAILS *parserll_add (PARSER_DETAILS *, PARSER_DETAILS *, unsigned short);
PARSER_DETAILS *parserll_del (PARSER_DETAILS **, PARSER_DETAILS **, PARSER_DETAILS *, short);
PARSER_DETAILS *parserll_free (PARSER_DETAILS *);
PARSER_DETAILS *parserll_find (PARSER_DETAILS *, uchar *);
PARSE_KEYWORDS *parse_keywordll_add (PARSE_KEYWORDS *, PARSE_KEYWORDS *, unsigned short);
PARSE_KEYWORDS *parse_keywordll_del (PARSE_KEYWORDS **, PARSE_KEYWORDS **, PARSE_KEYWORDS *, short);
PARSE_KEYWORDS *parse_keywordll_free (PARSE_KEYWORDS *);
PARSE_FUNCTIONS *parse_functionll_add (PARSE_FUNCTIONS *, PARSE_FUNCTIONS *, unsigned short);
PARSE_FUNCTIONS *parse_functionll_del (PARSE_FUNCTIONS **, PARSE_FUNCTIONS **, PARSE_FUNCTIONS *, short);
PARSE_FUNCTIONS *parse_functionll_free (PARSE_FUNCTIONS *);
PARSE_HEADERS *parse_headerll_add (PARSE_HEADERS *, PARSE_HEADERS *, unsigned short);
PARSE_HEADERS *parse_headerll_free (PARSE_HEADERS *);
PARSER_MAPPING *mappingll_add (PARSER_MAPPING *, PARSER_MAPPING *, unsigned short);
PARSER_MAPPING *mappingll_del (PARSER_MAPPING **, PARSER_MAPPING **, PARSER_MAPPING *, short);
PARSER_MAPPING *mappingll_free (PARSER_MAPPING *);
PARSER_MAPPING *mappingll_find (PARSER_MAPPING *, uchar *, uchar *);
PARSE_COMMENTS *parse_commentsll_add (PARSE_COMMENTS *, PARSE_COMMENTS *, unsigned short);
PARSE_COMMENTS *parse_commentsll_del (PARSE_COMMENTS **, PARSE_COMMENTS **, PARSE_COMMENTS *, short);
PARSE_COMMENTS *parse_commentsll_free (PARSE_COMMENTS *);
PARSE_COMMENTS *parse_commentsll_find (PARSE_COMMENTS *, uchar *);
PARSE_POSTCOMPARE *parse_postcomparell_add (PARSE_POSTCOMPARE *, PARSE_POSTCOMPARE *, unsigned short);
PARSE_POSTCOMPARE *parse_postcomparell_del (PARSE_POSTCOMPARE **, PARSE_POSTCOMPARE **, PARSE_POSTCOMPARE *, short);
PARSE_POSTCOMPARE *parse_postcomparell_free (PARSE_POSTCOMPARE *);
PARSE_EXTENSION *parse_extensionll_add (PARSE_EXTENSION *, PARSE_EXTENSION *, unsigned short);
PARSE_EXTENSION *parse_extensionll_del (PARSE_EXTENSION **, PARSE_EXTENSION **, PARSE_EXTENSION *, short);
PARSE_EXTENSION *parse_extensionll_free (PARSE_EXTENSION *);

/* rexx.c */
unsigned long MyRexxRegisterFunctionExe (uchar *);
unsigned long MyRexxDeregisterFunction (uchar *);
short initialise_rexx (void);
short finalise_rexx (void);
short execute_macro_file (uchar *, uchar *, short *, bool);
short execute_macro_instore (uchar *, short *, uchar **, int *, int *, int);
short get_rexx_variable (uchar *, uchar **, int *);
short set_rexx_variable (uchar *, uchar *, long, int);

/* os2eas.c */
/* query.c */
short find_query_item (uchar *, int, uchar *);
short show_status (void);
short save_status (uchar *);
short set_extract_variables (short);
short get_number_dynamic_items (int);
short get_item_values (int, short, uchar *, uchar, long, uchar *, long);
int number_query_item (void);
int number_function_item (void);
void format_options (uchar *);

/* directry.c */
short set_dirtype (uchar *);
uchar *get_dirtype (uchar *);

short execute_sort (uchar *);

/* cursor.c */
short THEcursor_cmdline (uchar, VIEW_DETAILS *, short);
short THEcursor_column (void);
short THEcursor_down (uchar, VIEW_DETAILS *, short);
short THEcursor_file (bool, long, long);
short THEcursor_home (uchar, VIEW_DETAILS *, bool);
short THEcursor_left (short, bool);
short THEcursor_right (short, bool);
short THEcursor_up (short);
short THEcursor_move (uchar, VIEW_DETAILS *, bool, bool, short, short);
short THEcursor_goto (long, long);
short THEcursor_mouse (void);
long where_now (void);
long what_current_now (void);
long what_other_now (void);
long where_next (long, long, long);
long where_before (long, long, long);
bool enterable_field (long);
short go_to_new_field (long, long);
void get_cursor_position (long *, long *, long *, long *);
short advance_focus_line (long);
short advance_current_line (long);
short advance_current_or_focus_line (long);
void resolve_current_and_focus_lines (uchar, VIEW_DETAILS *, long, long, short, bool, bool);

/* colour.c */
short parse_colours (uchar *, COLOUR_ATTR *, uchar **, bool, bool *);
short parse_modifiers (uchar *, COLOUR_ATTR *);
chtype merge_curline_colour (COLOUR_ATTR *, COLOUR_ATTR *);
void set_up_default_colours (FILE_DETAILS *, COLOUR_ATTR *, int);
void set_up_default_ecolours (FILE_DETAILS *);
uchar *get_colour_strings (COLOUR_ATTR *);
int is_valid_colour (uchar * colour);

/* column.c */
short column_command (uchar *, int);

/* mouse.c */
void wmouse_position (WINDOW *, int *, int *);
short THEMouse (uchar *);
short get_mouse_info (int *, int *, int *);
void which_window_is_mouse_in (uchar *, int *);
void reset_saved_mouse_pos (void);
void get_saved_mouse_pos (int *, int *);
void initialise_mouse_commands (void);
int mouse_info_to_key (int, int, int, int);
uchar *mouse_key_number_to_name (int, uchar *, int *);
int find_mouse_key_value (uchar *);
int find_mouse_key_value_in_window (uchar *, uchar *);
short ScrollbarHorz (uchar *);
short ScrollbarVert (uchar *);

/* memory.c */
void init_memory_table (void);
void free_memory_flists (void);
void *get_a_block (size_t);
void give_a_block (void *);
void *resize_a_block (void *, size_t);
void the_free_flists (void);

/* single.c */
int initialise_fifo (LINE * first_file_name, long startup_line, long startup_column, bool ro);
int process_fifo_input (int key);
void close_fifo (void);

/* comm*.c */
short Add (uchar *);
short Alert (uchar *);
short All (uchar *);
short Alt (uchar *);
short Arbchar (uchar *);
short Autocolour (uchar *);
short Autosave (uchar *);
short Autoscroll (uchar *);
short Backup (uchar *);
short Backward (uchar *);
short BeepSound (uchar *);
short Bottom (uchar *);
short Boundmark (uchar *);
short Cappend (uchar *);
short Cancel (uchar *);
short Case (uchar *);
short Ccancel (uchar *);
short Cdelete (uchar *);
short Cfirst (uchar *);
short Change (uchar *);
short Cinsert (uchar *);
short Clast (uchar *);
short Clearerrorkey (uchar *);
short Clearscreen (uchar *);
short Clocate (uchar *);
short Clock (uchar *);
short Cmatch (uchar *);
short Cmdarrows (uchar *);
short Cmdline (uchar *);
short Cmsg (uchar *);
short Colour (uchar *);
short Colouring (uchar *);
short Compat (uchar *);
short Compress (uchar *);
short THECommand (uchar *);
short ControlChar (uchar *);
short Copy (uchar *);
short Coverlay (uchar *);
short Creplace (uchar *);
short Ctlchar (uchar *);
short Curline (uchar *);
short Cursor (uchar *);
short CursorStay (uchar *);
short Define (uchar *);
short Defsort (uchar *);
short DeleteLine (uchar *);
short Dialog (uchar *);
short Directory (uchar *);
short Display (uchar *);
short Duplicate (uchar *);
short Ecolour (uchar *);
short Emsg (uchar *);
short THEEditv (uchar *);
short Enter (uchar *);
short Eolout (uchar *);
short Equivchar (uchar *);
short Errorformat (uchar *);
short Erroroutput (uchar *);
short Etmode (uchar *);
short Expand (uchar *);
short Extract (uchar *);
short Ffile (uchar *);
short File (uchar *);
short THEFiletabs (uchar *);
short Fillbox (uchar *);
short Find (uchar *);
short Findup (uchar *);
short Fext (uchar *);
short Fdisplay (uchar *);
short Filename (uchar *);
short Fname (uchar *);
short Forward (uchar *);
short Fpath (uchar *);
short Fullfname (uchar *);
short Get (uchar *);
short THEHeader (uchar *);
short Help (uchar *);
short Hex (uchar *);
short Hexdisplay (uchar *);
short Hexshow (uchar *);
short Highlight (uchar *);
short Hit (uchar *);
short Idline (uchar *);
short Impmacro (uchar *);
short Impos (uchar *);
short Input (uchar *);
short Inputmode (uchar *);
short Insertmode (uchar *);
short THEInterface (uchar *);
short Join (uchar *);
short Lastop (uchar *);
short Left (uchar *);
short Lineflag (uchar *);
short Linend (uchar *);
short Locate (uchar *);
short Lowercase (uchar *);
short Macro (uchar *);
short SetMacro (uchar *);
short Macroext (uchar *);
short Macropath (uchar *);
short Margins (uchar *);
short Mark (uchar *);
short Modify (uchar *);
short Mouse (uchar *);
short Mouseclick (uchar *);
short THEMove (uchar *);
short Msg (uchar *);
short Msgline (uchar *);
short Msgmode (uchar *);
short Newlines (uchar *);
short THENext (uchar *);
short Nextwindow (uchar *);
short Nfind (uchar *);
short Nfindup (uchar *);
short Nomsg (uchar *);
short Nondisp (uchar *);
short Nop (uchar *);
short Number (uchar *);
short Overlaybox (uchar *);
short Os (uchar *);
short Osnowait (uchar *);
short Osquiet (uchar *);
short Osredir (uchar *);
short Pagewrap (uchar *);
short Parser (uchar *);
short Pending (uchar *);
short Point (uchar *);
short Popup (uchar *);
short Position (uchar *);
short Prefix (uchar *);
short Preserve (uchar *);
short Prevwindow (uchar *);
short Print (uchar *);
short Pscreen (uchar *);
short THEPrinter (uchar *);
short Put (uchar *);
short Putd (uchar *);
short Qquit (uchar *);
short Quit (uchar *);
short Query (uchar *);
short THEReadonly (uchar *);
short Readv (uchar *);
short THERecord (uchar *);
short Recover (uchar *);
short Reexecute (uchar *);
short Redit (uchar *);
short Redraw (uchar *);
short THERefresh (uchar *);
short Repeat (uchar *);
short Replace (uchar *);
short Reprofile (uchar *);
short Reserved (uchar *);
short Reset (uchar *);
short Restore (uchar *);
short Retrieve (uchar *);
short Rexxhalt (uchar *);
short Rexxoutput (uchar *);
short THERexx (uchar *);
short Rgtleft (uchar *);
short Right (uchar *);
short Save (uchar *);
short Scope (uchar *);
short Scale (uchar *);
short THESearch (uchar *);
short Select (uchar *);
short Set (uchar *);
short Schange (uchar *);
short Slk (uchar *);
short THEScreen (uchar *);
short Shadow (uchar *);
short Shift (uchar *);
short ShowKey (uchar *);
short Sort (uchar *);
short Sos (uchar *);
short Sos_addline (uchar *);
short Sos_blockend (uchar *);
short Sos_blockstart (uchar *);
short Sos_bottomedge (uchar *);
short Sos_cuadelback (uchar *);
short Sos_cuadelchar (uchar *);
short Sos_current (uchar *);
short do_Sos_current (uchar *, uchar, VIEW_DETAILS *);
short Sos_cursoradj (uchar *);
short Sos_cursorshift (uchar *);
short Sos_delback (uchar *);
short Sos_delchar (uchar *);
short Sos_delend (uchar *);
short Sos_delline (uchar *);
short Sos_delword (uchar *);
short Sos_doprefix (uchar *);
short Sos_edit (uchar *);
short Sos_endchar (uchar *);
short Sos_execute (uchar *);
short Sos_firstchar (uchar *);
short Sos_firstcol (uchar *);
short Sos_instab (uchar *);
short Sos_lastcol (uchar *);
short Sos_leftedge (uchar *);
short Sos_makecurr (uchar *);
short Sos_marginl (uchar *);
short Sos_marginr (uchar *);
short Sos_pastecmdline (uchar *);
short Sos_parindent (uchar *);
short Sos_prefix (uchar *);
short do_Sos_prefix (uchar *, uchar, VIEW_DETAILS *);
short Sos_qcmnd (uchar *);
short Sos_rightedge (uchar *);
short Sos_settab (uchar *);
short Sos_startendchar (uchar *);
short Sos_tabb (uchar *);
short Sos_tabf (uchar *);
short Sos_tabfieldb (uchar *);
short Sos_tabfieldf (uchar *);
short Sos_tabwordb (uchar *);
short Sos_tabwordf (uchar *);
short Sos_topedge (uchar *);
short Sos_undo (uchar *);
short Split (uchar *);
short Spltjoin (uchar *);
short Ssave (uchar *);
short Statopt (uchar *);
short Status (uchar *);
short Statusline (uchar *);
short Stay (uchar *);
short Suspend (uchar *);
short Synonym (uchar *);
short Tabfile (uchar *);
short Tabkey (uchar *);
short Tabline (uchar *);
short Tabs (uchar *);
short Tabsin (uchar *);
short Tabsout (uchar *);
short Tag (uchar *);
short Targetsave (uchar *);
short Text (uchar *);
short THighlight (uchar *);
short Timecheck (uchar *);
short Toascii (uchar *);
short Tofeof (uchar *);
short Top (uchar *);
short Trailing (uchar *);
short THETypeahead (uchar *);
short Undoing (uchar *);
short Untaa (uchar *);
short Up (uchar *);
short Uppercase (uchar *);
short Verify (uchar *);
short Width (uchar *);
short Word (uchar *);
short Wordwrap (uchar *);
short Wrap (uchar *);
short Xedit (uchar *);
short Zone (uchar *);

